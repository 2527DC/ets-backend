generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////////
// üßë‚Äçüíº Users (Admin & Employee)
/////////////////////////////

enum UserType {
  ADMIN
  SUPER_ADMIN
  EMPLOYEE
}

model User {
  id         Int       @id @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  phone      String?   @unique
  type       UserType
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // tenant/employee-specific fields
  companyId  Int?
  roleId     Int?

  company    Company? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  role       Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // permissions
  adminPermissions AdminPermission[]
}

/////////////////////////////
// üß© Modules & permissions
/////////////////////////////

model Module {
  id        Int      @id @default(autoincrement())
  name      String
  key       String   @unique // e.g., "booking", "dashboard"
  parentId  Int?
  parent    Module?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  children  Module[] @relation("ParentChild")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  adminPermissions AdminPermission[]
  rolePermissions  RolePermission[]
}

model AdminPermission {
  id        Int    @id @default(autoincrement())
  userId    Int
  moduleId  Int

  canRead   Boolean @default(false)
  canWrite  Boolean @default(false)
  canDelete Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, moduleId], name: "unique_user_module")
}

model RolePermission {
  id        Int    @id @default(autoincrement())
  roleId    Int
  moduleId  Int

  canRead   Boolean @default(false)
  canWrite  Boolean @default(false)
  canDelete Boolean @default(false)

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([roleId, moduleId], name: "unique_role_module")
}

/////////////////////////////
// üè¢ Tenants
/////////////////////////////

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?  @unique
  phone     String?  @unique
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users     User[]    // Employees & Admins (if multi-tenant admins)
  roles     Role[]
  drivers   Driver[]
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  companyId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rolePermissions RolePermission[]
  users           User[]
}

/////////////////////////////
// üöó Drivers (belong to company)
/////////////////////////////

model Driver {
  id          Int      @id @default(autoincrement())
  name        String
  email       String?  @unique
  phone       String?  @unique
  licenseNo   String
  vehicleId   Int?     // optional if you track vehicles separately
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
