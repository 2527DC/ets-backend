generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id            Int            @id @default(autoincrement())
  userId        Int
  pickupAddress String
  dropAddress   String
  status        BookingStatus  @default(PENDING)
  bookingType   BookingType
  isAdhoc       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  User          User           @relation(fields: [userId], references: [id])
  RouteBooking  RouteBooking[]
}

model Company {
  id            Int             @id @default(autoincrement())
  name          String
  email         String?         @unique
  phone         String?         @unique
  address       String?
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  Department    Department[]
  Driver        Driver[]
  Role          Role[]
  Shift         Shift[]
  ShiftCategory ShiftCategory[]
  User          User[]
  VehicleType   VehicleType[]
  Vendor        Vendor[]
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  companyId   Int
  Company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  User        User[]
}

model Driver {
  id              Int               @id @default(autoincrement())
  name            String
  email           String?           @unique
  phone           String?           @unique
  licenseNo       String            @unique
  vehicleId       Int?              @unique
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  companyId       Int?
  driverId        String            @unique
  vendorId        Int?
  Company         Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Vehicle         Vehicle?          @relation(fields: [vehicleId], references: [id])
  Vendor          Vendor?           @relation(fields: [vendorId], references: [id])
  DriverDocumnets DriverDocumnets[]
  Trip            Trip[]
}

model DriverDocumnets {
  id           Int            @id @default(autoincrement())
  driverId     Int
  documentType DocumentType
  status       DocumentStatus @default(PENDING)
  filepath     String
  expiryDate   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Driver       Driver         @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@unique([driverId, documentType])
}

model Module {
  id             Int              @id @default(autoincrement())
  name           String
  key            String           @unique
  parentId       Int?
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Module         Module?          @relation("ModuleToModule", fields: [parentId], references: [id], onDelete: Cascade)
  other_Module   Module[]         @relation("ModuleToModule")
  RolePermission RolePermission[]
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String
  companyId      Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime
  Company        Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  RolePermission RolePermission[]
  User           User[]
}

model RolePermission {
  id        Int     @id @default(autoincrement())
  roleId    Int
  moduleId  Int
  canRead   Boolean @default(false)
  canWrite  Boolean @default(false)
  canDelete Boolean @default(false)
  Module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  Role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, moduleId])
}

model Route {
  id           Int            @id @default(autoincrement())
  distance     Float          @default(0.0)
  vendorId     Int?           @unique
  vehicleId    Int?           @unique
  shiftId      Int?
  createdAt    DateTime       @default(now())
  Shift        Shift?         @relation(fields: [shiftId], references: [id])
  Vehicle      Vehicle?       @relation(fields: [vehicleId], references: [id])
  Vendor       Vendor?        @relation(fields: [vendorId], references: [id])
  RouteBooking RouteBooking[]
  Trip         Trip[]
}

model RouteBooking {
  id        Int      @id @default(autoincrement())
  routeId   Int
  bookingId Int
  createdAt DateTime @default(now())
  Booking   Booking  @relation(fields: [bookingId], references: [id])
  Route     Route    @relation(fields: [routeId], references: [id])

  @@unique([routeId, bookingId])
}

model Shift {
  id              Int           @id @default(autoincrement())
  shiftType       ShiftType
  hour            Int
  minute          Int
  shiftCategoryId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  companyId       Int
  isActive        Boolean       @default(true)
  Route           Route[]
  Company         Company       @relation(fields: [companyId], references: [id])
  ShiftCategory   ShiftCategory @relation(fields: [shiftCategoryId], references: [id])
}

model ShiftCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  companyId   Int
  Shift       Shift[]
  Company     Company  @relation(fields: [companyId], references: [id])
}

model Trip {
  id        Int        @id @default(autoincrement())
  driverId  Int
  vendorId  Int
  routeId   Int
  createdBy Int
  createdAt DateTime   @default(now())
  status    TripStatus
  Driver    Driver     @relation(fields: [driverId], references: [id])
  Route     Route      @relation(fields: [routeId], references: [id])
  Vendor    Vendor     @relation(fields: [vendorId], references: [id])
}

model User {
  id                    Int           @id @default(autoincrement())
  name                  String
  email                 String        @unique
  password              String
  type                  UserType
  isActive              Boolean       @default(true)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime
  companyId             Int?
  roleId                Int?
  address               String?
  lat                   String?
  lng                   String?
  gender                Gender?
  specialNeed           SpecialNeeds?
  specialNeedEnd        DateTime?
  specialNeedStart      DateTime?
  userId                String?       @unique
  additionalInfo        Json?
  departmentId          Int?
  landmark              String?
  alternateMobileNumber String?
  ntg                   String
  phone                 Int?          @unique
  Booking               Booking[]
  Company               Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Department            Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  Role                  Role?         @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Vehicle {
  id              Int               @id @default(autoincrement())
  vehicleId       String            @unique
  vendorId        Int
  vehicleTypeId   Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  Driver          Driver?
  Route           Route?
  VehicleType     VehicleType       @relation(fields: [vehicleTypeId], references: [id])
  Vendor          Vendor            @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  VehicleDocument VehicleDocument[]
}

model VehicleDocument {
  id           Int            @id @default(autoincrement())
  vehicleId    Int
  documentType DocumentType
  filePath     String
  status       DocumentStatus @default(PENDING)
  expiryDate   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Vehicle      Vehicle        @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([vehicleId, documentType])
}

model VehicleType {
  id          Int       @id @default(autoincrement())
  name        String
  companyId   Int
  capacity    Int
  description String?
  fuel        FuelType
  Vehicle     Vehicle[]
  Company     Company   @relation(fields: [companyId], references: [id])
}

model Vendor {
  id        Int       @id @default(autoincrement())
  name      String
  driverId  Int?
  companyId Int?
  isActive  Boolean   @default(true)
  address   String?
  email     String?
  phone     String?
  Driver    Driver[]
  Route     Route?
  Trip      Trip[]
  Vehicle   Vehicle[]
  Company   Company?  @relation(fields: [companyId], references: [id])
}

enum BookingStatus {
  PENDING
  ASSIGNED
  COMPLETED
  CANCELLED
}

enum BookingType {
  LOGIN
  LOGOUT
  ADHOC
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  LICENSE
  AADHAR
  GOV_ID
  BGV
  POLICE_VERIFICATION
  MEDICAL
  TRAINING
  EYE_TEST
  UNDERTAKING
  INDICATION
  RC_CARD
  INSURANCE
  PERMIT
  POLLUTION
  FITNESS
  TAX_RECEIPT
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum ShiftType {
  LOGIN
  LOGOUT
}

enum SpecialNeeds {
  PREGNENT
}

enum TripStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum UserType {
  ADMIN
  SUPER_ADMIN
  EMPLOYEE
}
