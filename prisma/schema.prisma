generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?  @unique
  type      UserType
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId Int?
  roleId    Int?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role      Role?    @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Module {
  id              Int              @id @default(autoincrement())
  name            String
  key             String           @unique
  parentId        Int?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parent          Module?          @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children        Module[]         @relation("ParentChild")
  rolePermissions RolePermission[]
}

model RolePermission {
  id        Int     @id @default(autoincrement())
  roleId    Int
  moduleId  Int
  canRead   Boolean @default(false)
  canWrite  Boolean @default(false)
  canDelete Boolean @default(false)
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, moduleId], name: "unique_role_module")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?  @unique
  phone     String?  @unique
  address   String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  drivers   Driver[]
  roles     Role[]
  users     User[]
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String
  companyId       Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rolePermissions RolePermission[]
  users           User[]
}

model Driver {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?  @unique
  phone     String?  @unique
  licenseNo String
  vehicleId Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  companyId Int
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum UserType {
  ADMIN
  SUPER_ADMIN
  EMPLOYEE
}
