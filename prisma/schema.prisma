generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int           @id @default(autoincrement())
  name              String
  email             String        @unique
  password          String
  type              UserType
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  companyId         Int?
  roleId            Int?
  address           String?
  gender            Gender?
  specialNeed       SpecialNeeds?
  specialNeedEnd    DateTime?
  specialNeedStart  DateTime?
  userId            String?       @unique
  additionalInfo    Json?
  departmentId      Int?
  phone             String        @unique
  lat               String?
  lng               String?
  alternative_phone String?
  landmark          String?
  bookings          Booking[]
  company           Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department        Department?   @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  role              Role?         @relation(fields: [roleId], references: [id], onDelete: Cascade)
  weekOff           UserWeekOff?
}

model UserWeekOff {
  id        Int         @id @default(autoincrement())
  userId    Int         @unique
  daysOff   DayOfWeek[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  companyId   Int
  company     Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users       User[]
}

model Module {
  id              Int              @id @default(autoincrement())
  name            String
  key             String           @unique
  parentId        Int?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parent          Module?          @relation("ParentChild", fields: [parentId], references: [id], onDelete: Cascade)
  children        Module[]         @relation("ParentChild")
  rolePermissions RolePermission[]
}

model RolePermission {
  id        Int     @id @default(autoincrement())
  roleId    Int
  moduleId  Int
  canRead   Boolean @default(false)
  canWrite  Boolean @default(false)
  canDelete Boolean @default(false)
  module    Module  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, moduleId], name: "unique_role_module")
}

model Company {
  id              Int             @id @default(autoincrement())
  name            String
  email           String?         @unique
  phone           String?         @unique
  address         String?
  isActive        Boolean         @default(true)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  bookings        Booking[]
  CutoffWindow    CutoffWindow[]
  department      Department[]
  drivers         Driver[]
  roles           Role[]
  shifts          Shift[]
  shiftCategories ShiftCategory[]
  users           User[]
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String
  companyId       Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rolePermissions RolePermission[]
  users           User[]
}

model Vendor {
  id       Int       @id @default(autoincrement())
  name     String
  driverId Int?
  routes   Route?
  Trip     Trip[]
  vehicles Vehicle[]
  driver   Driver?   @relation(fields: [driverId], references: [id])
}

model VehicleType {
  id       Int       @id @default(autoincrement())
  name     String
  vehicles Vehicle[]
}

model Vehicle {
  id            Int               @id @default(autoincrement())
  vehicleId     String            @unique
  vendorId      Int
  vehicleTypeId Int
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  driver        Driver?           @relation("VehicleDriver")
  Route         Route?
  vehicleType   VehicleType       @relation(fields: [vehicleTypeId], references: [id])
  vendor        Vendor            @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  documents     VehicleDocument[]
}

model VehicleDocument {
  id           Int            @id @default(autoincrement())
  vehicleId    Int
  documentType DocumentType
  filePath     String
  status       DocumentStatus @default(PENDING)
  expiryDate   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  vehicle      Vehicle        @relation(fields: [vehicleId], references: [id], onDelete: Cascade)

  @@unique([vehicleId, documentType])
}

model Driver {
  id              Int               @id @default(autoincrement())
  name            String
  email           String?           @unique
  phone           String?           @unique
  licenseNo       String
  vehicleId       Int?              @unique
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  companyId       Int?
  driverId        String            @unique
  company         Company?          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  vehicle         Vehicle?          @relation("VehicleDriver", fields: [vehicleId], references: [id])
  driverDocuments DriverDocumnets[]
  Trip            Trip[]
  vendors         Vendor[]
}

model DriverDocumnets {
  id           Int            @id @default(autoincrement())
  driverId     Int
  documentType DocumentType
  status       DocumentStatus @default(PENDING)
  filepath     String
  expiryDate   DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  driver       Driver         @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@unique([driverId, documentType])
}

model ShiftCategory {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  companyId   Int
  shifts      Shift[]
  company     Company  @relation(fields: [companyId], references: [id])
}

model Shift {
  id              Int           @id @default(autoincrement())
  shiftType       ShiftType
  hour            Int
  minute          Int
  shiftCategoryId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  companyId       Int
  isActive        Boolean       @default(true)
  bookings        Booking[]
  Route           Route[]
  company         Company       @relation(fields: [companyId], references: [id])
  shiftCategory   ShiftCategory @relation(fields: [shiftCategoryId], references: [id])
}

model Booking {
  id            Int            @id @default(autoincrement())
  userId        Int
  pickupAddress String
  dropAddress   String
  status        BookingStatus  @default(PENDING)
  bookingType   BookingType
  isAdhoc       Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  companyId     Int
  scheduledTime DateTime
  shiftId       Int?
  company       Company        @relation(fields: [companyId], references: [id])
  shift         Shift?         @relation(fields: [shiftId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  RouteBooking  RouteBooking[]
}

model Route {
  id            Int            @id @default(autoincrement())
  distance      Float          @default(0.0)
  vendorId      Int?           @unique
  vehicleId     Int?           @unique
  shiftId       Int?
  createdAt     DateTime       @default(now())
  shift         Shift?         @relation(fields: [shiftId], references: [id])
  vehicle       Vehicle?       @relation(fields: [vehicleId], references: [id])
  vendor        Vendor?        @relation(fields: [vendorId], references: [id])
  routeBookings RouteBooking[]
  trips         Trip[]
}

model RouteBooking {
  id        Int      @id @default(autoincrement())
  routeId   Int
  bookingId Int
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  route     Route    @relation(fields: [routeId], references: [id])

  @@unique([routeId, bookingId])
}

model Trip {
  id        Int        @id @default(autoincrement())
  driverId  Int
  vendorId  Int
  routeId   Int
  createdBy Int
  createdAt DateTime   @default(now())
  status    TripStatus
  driver    Driver     @relation(fields: [driverId], references: [id])
  route     Route      @relation(fields: [routeId], references: [id])
  vendor    Vendor     @relation(fields: [vendorId], references: [id])
}

model CutoffWindow {
  id          Int        @id @default(autoincrement())
  companyId   Int
  cutoffType  CutoffType
  durationMin Int
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  company     Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, cutoffType], name: "unique_company_cutoff_type")
}

model AuditLog {
  id         Int       @id @default(autoincrement())
  table_name String    @map("table_name")
  record_id  Int       @map("record_id")
  action     String    @map("action") @db.VarChar(10)
  old_data   Json?     @map("old_data")
  new_data   Json?     @map("new_data")
  changed_by String?   @map("changed_by")
  changed_at DateTime? @default(now()) @map("changed_at") @db.Timestamp(6)

  @@map("audit_log")
}

enum UserType {
  ADMIN
  SUPER_ADMIN
  EMPLOYEE
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum SpecialNeeds {
  PREGNENT
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DocumentType {
  LICENSE
  AADHAR
  GOV_ID
  BGV
  POLICE_VERIFICATION
  MEDICAL
  TRAINING
  EYE_TEST
  UNDERTAKING
  INDICATION
  RC_CARD
  INSURANCE
  PERMIT
  POLLUTION
  FITNESS
  TAX_RECEIPT
}

enum ShiftType {
  LOGIN
  LOGOUT
}

enum BookingType {
  LOGIN
  LOGOUT
  ADHOC
}

enum BookingStatus {
  PENDING
  ASSIGNED
  COMPLETED
  CANCELLED
}

enum TripStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum CutoffType {
  BOOKING_CREATION
  BOOKING_CANCELLATION
  BOOKING_RESCHEDULE
}
